name: Deploy Recommendation System

on:
  workflow_dispatch

env:
  URL_IMAGE_ECR: 187443710069.dkr.ecr.us-east-1.amazonaws.com/recommendation.system.cars:recommendation-system-${{ github.sha }}
  URL_IMAGE_ECR_NGINX: 187443710069.dkr.ecr.us-east-1.amazonaws.com/recommendation.system.cars:nginx-${{ github.sha }}
  CLUSTER_NAME: recommendation

jobs:
  apply-terraform:

    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Add profile credentials to ~/.aws/credentials
        shell: bash
        run: |
          aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID --profile $AWS_PROFILE
          aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY --profile $AWS_PROFILE
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_PROFILE: ${{ secrets.AWS_PROFILE }}

      - name: Installing Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.5

      - name: Terraform Init, Select Workspace, Plan and Apply
        shell: bash
        run: |
          cd terraform
          rm -rf .terraform*
          terraform init
          terraform apply -auto-approve
  build-and-push-app:

    runs-on: ubuntu-latest
    needs: apply-terraform

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Add profile credentials to ~/.aws/credentials
        shell: bash
        run: |
          aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID --profile $AWS_PROFILE
          aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY --profile $AWS_PROFILE
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_PROFILE: ${{ secrets.AWS_PROFILE }}

      - name: Login Docker into to Amazon ECR
        run: aws ecr get-login-password --region $AWS_REGION --profile $AWS_PROFILE | docker login --username AWS --password-stdin $URL_IMAGE_ECR
        env:
          AWS_REGION: ${{ secrets.AWS_REGION }}
          URL_IMAGE_ECR: ${{ env.URL_IMAGE_ECR }}
          AWS_PROFILE: ${{ secrets.AWS_PROFILE }}

      - name: Build image
        run: docker build --target prod-recommendation-system -t $URL_IMAGE_ECR .
        env:
            URL_IMAGE_ECR: ${{ env.URL_IMAGE_ECR }}

      - name: Push to ECR
        run: docker push $URL_IMAGE_ECR
        env:
            URL_IMAGE_ECR: ${{ env.URL_IMAGE_ECR }}

  build-and-push-nginx:

    runs-on: ubuntu-latest
    needs: apply-terraform

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Add profile credentials to ~/.aws/credentials
        shell: bash
        run: |
          aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID --profile $AWS_PROFILE
          aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY --profile $AWS_PROFILE
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_PROFILE: ${{ secrets.AWS_PROFILE }}

      - name: Login Docker into to Amazon ECR
        run: aws ecr get-login-password --region $AWS_REGION --profile $AWS_PROFILE | docker login --username AWS --password-stdin $URL_IMAGE_ECR
        env:
          AWS_REGION: ${{ secrets.AWS_REGION }}
          URL_IMAGE_ECR: ${{ env.URL_IMAGE_ECR_NGINX }}
          AWS_PROFILE: ${{ secrets.AWS_PROFILE }}

      - name: Build image
        run: docker build --target prod-nginx -t $URL_IMAGE_ECR .
        env:
            URL_IMAGE_ECR: ${{ env.URL_IMAGE_ECR_NGINX }}

      - name: Push to ECR
        run: docker push $URL_IMAGE_ECR
        env:
            URL_IMAGE_ECR: ${{ env.URL_IMAGE_ECR_NGINX }}


  deploy:
    runs-on: ubuntu-latest
    needs: [build-and-push-app, build-and-push-nginx]

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Add profile credentials to ~/.aws/credentials
        shell: bash
        run: |
          aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID --profile $AWS_PROFILE
          aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY --profile $AWS_PROFILE
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_PROFILE: ${{ secrets.AWS_PROFILE }}

      - name: Install kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: v1.25.2

      - name: Replace placeholder by its env value
        run: |
          envsubst '$GITHUB_SHA,$CLUSTER_NAME' < $PATH_TO_K8S > ${PATH_TO_K8S}_temp
          mv ${PATH_TO_K8S}_temp $PATH_TO_K8S
        env:
          CLUSTER_NAME: ${{ env.CLUSTER_NAME }}
          PATH_TO_K8S: k8s/car-recommendation-system.yml

      - name: Update kubectl config
        run: aws eks update-kubeconfig --name $CLUSTER_NAME --verbose --alias $CLUSTER_NAME --region $AWS_REGION --profile $AWS_PROFILE
        env:
          CLUSTER_NAME: ${{ env.CLUSTER_NAME }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          AWS_PROFILE: ${{ secrets.AWS_PROFILE }}

      - name: Apply kubernetes
        run: |
          kubectl apply -f $PATH_TO_K8S
        env:
          PATH_TO_K8S: k8s/car-recommendation-system.yml